name: Deploy to EC2

on:
  push:
    branches: [ master ]

env:
  DOCKER_COMPOSE_VERSION: 1.29.2

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Load environment variables
        uses: falti/dotenv-action@v1
        with:
          env-file: .env

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - name: Configure HTTPS for IP access
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            # 1. Setup SSL directory
            SSL_DIR="/etc/nginx/ssl/medium-plan"
            sudo mkdir -p "$SSL_DIR"
            
            # 2. Generate self-signed cert for IP
            sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout "$SSL_DIR/privkey.pem" \
              -out "$SSL_DIR/fullchain.pem" \
              -subj "/CN=ec2-54-236-65-244.compute-1.amazonaws.com" \
              -addext "subjectAltName=IP:54.236.65.244"
            
            # 3. Set proper permissions
            sudo chmod 600 "$SSL_DIR"/*
            
            # 4. Update Nginx config
            sudo bash -c 'cat > /etc/nginx/sites-enabled/craftapp.conf << "EOL"
            server {
                listen 443 ssl;
                server_name 54.236.65.244;
      
                ssl_certificate /etc/nginx/ssl/medium-plan'/fullchain.pem;
                ssl_certificate_key /etc/nginx/ssl/medium-plan/privkey.pem;
      
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers '\''ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256'\'';
                ssl_prefer_server_ciphers on;
      
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host \$host;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                }
            }
      
            server {
                listen 8080;
                server_name 54.236.65.244;
                return 301 https://\$host\$request_uri;
            }
            EOL'
            
            # 5. Test and reload Nginx
            sudo nginx -t && sudo systemctl reload nginx
            
            # 6. Update security group to allow 443 if needed
            sudo ufw allow 443/tcp
          
      - name: Copy nginx config
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "devops/craftapp.conf"
          target: "/home/ubuntu/"
          strip_components: 1
          tar_tmp_path: ""

      - name: Move nginx config with sudo
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo mv /home/ubuntu/craftapp.conf /etc/nginx/sites-enabled/
            sudo chown root:root /etc/nginx/sites-enabled/craftapp.conf
            sudo chmod 644 /etc/nginx/sites-enabled/craftapp.conf
            sudo nginx -t && sudo systemctl reload nginx

      - name: Copy files via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./"
          target: "/home/ubuntu/app/medium-plan"

      - name: Deploy application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit immediately if any command fails
            # Setup database directory
            sudo mkdir -p /opt/medium-plan/postgres-data
            sudo chown -R 1000:1000 /opt/medium-plan/postgres-data
            sudo chmod -R 755 /opt/medium-plan
            # Set secure permissions for .env files
            cd /home/ubuntu/app/medium-plan
            sudo chmod +x init-db.sh
            sudo chmod 644 frontend/.env
            sudo chmod 644 backend/.env
            # Clean up and deploy with explicit env file
            docker-compose --env-file backend/.env down || true
            docker system prune -f
            docker-compose --env-file backend/.env up -d --build
            
            # Wait for PostgreSQL to initialize
            sleep 10
            # docker-compose exec postgres sh /docker-entrypoint-initdb.d/init-db.sh
